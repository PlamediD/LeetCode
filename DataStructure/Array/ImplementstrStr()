/* Description: 
Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Clarification:

What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().

Example 1:

Input: haystack = "hello", needle = "ll"
Output: 2
Example 2:

Input: haystack = "aaaaa", needle = "bba"
Output: -1

Level: Easy 
*/


//DEVELOP YOUR OWN SOLUTION 
//DO NOT USE IndexOf( built -in functions) 

//Time complexity: O(N^2) 
Space: O(1) 
//Code below: 

public class Solution {
    public int StrStr(string haystack, string needle) {
        if(string.IsNullOrEmpty(needle)){ 
            return 0;
        }
        for(int i=0; i<=haystack.Length-needle.Length;i++){
            for(int j=0; j<needle.Length & haystack[i+j]==needle[j];j++){
                if(j==needle.Length-1){ return i;}
                
            }
        }
        return -1;
    }
}

hay: hello
needle: ll
i=0; i=5-2= 3
j=0; j=2; 
hay[0+0]=
/* Language used: C#
Algo: 
Check if needle is empty. If it is return 0
Else: 
Use IndexoF to get the index of haystack in needle. 
( IndexOF is used to find the zero-based index of the first 
occurrence of a specified character or string within the current instance of the string. 
The method returns -1 if the character or string is not found. )
*/

//Code below: 

public class Solution {
    public int StrStr(string haystack, string needle) {
        if(string.IsNullOrEmpty(needle)){ return 0;}
        
        return haystack.IndexOf(needle);
    }
}
