/*
Description: 
Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.


Example 1:

Input: s = "anagram", t = "nagaram"
Output: true

Example 2:

Input: s = "rat", t = "car"
Output: false

Constraints:

1 <= s.length, t.length <= 5 * 104
s and t consist of lowercase English letters.
*/

/*
Languge used: C#

Algo: check that both s and t are the same lenght. If they are not, we automaticaly know that it is false
(since all letters of s should appear in s at least once. So if they are different size, it means that one or more letters are missing) 
If they are the same length, then create two arrays. One with letters from string s and the other from string t. 
Sort those arrays, then compare them. If they contain exactly the same letters when sorted, then they are anagram. 
if tt is an anagram of ss, sorting both strings will result in two identical strings

Runtime: 90 ms, faster than 82.34% of C# online submissions for Valid Anagram.
Memory Usage: 39.2 MB, less than 36.06% of C# online submissions for Valid Anagram.

Time complexity: O(n log n) 
n is the length of either s or t( they are supposed to be the same length). 
Sorting is 0(n^2) 
Sortig time complexity is not set/ may be O(N^2) OR ...
O( n log n) 
Comparision is O(n) 
O(n log n )>O(n)==> O(n log n) 
Space complexity: O(1) 



//Code below : 
public class Solution {
    public bool IsAnagram(string s, string t) {
        if(s.Length!=t.Length){
            return false; 
        }
        
        char[] str1= s.ToCharArray(0,s.Length);
        char[] str2= t.ToCharArray(0,t.Length);
        Array.Sort(str1);
        Array.Sort(str2);
        
        return  str1.SequenceEqual(str2);
        
    }
}

FIND A SOLUTION USING HASH TABLE..../dictionarry :
Key : character ...
value: count

Input: s = "anagram", t = "nagaram"
Output: true

s
eg : Key: a : value: 1 +1=2+1=3
    key: n: value: 1
    key: m: value: 1
    etc 
   t 
   key : a: 3-1...
   value of all keys should be zero at the end
   then we know it is anagram 
   if not, false 

*/

public class Solution {
    public bool IsAnagram(string s, string t) {
        if(s.Length!=t.Length){
            return false; 
        }
        
    // Create a Dictionary containing char as Key and
    // int as Value. We will be storing character as
    // Key and count of character as Value.
    //Pattern to create a dictionary : Type: Dictionary , < type of key: char, type of value : int> name of it: map = new type/Dictionary <type for key/char , type for value/int>(); 
    Dictionary <char,int> map= new Dictionary <char, int>();
 
        
    // Loop over all character of String s and fill the 
    // Dictionary.
        
    
    for (int i = 0; i < s.Length; i++)
    {
        
         if (map.ContainsKey(s[i]))
             
      {
 
        // If contains increase count by 1 for that
        // character
        map[s[i]] = map[s[i]] + 1;
      }
      else
      { 
        // else put that character in map and set
        // count to 1 as character is encountered
        // first time
        map.Add(s[i], 1);
      }
    }
         // Now loop over String t
    for (int i = 0; i < t.Length; i++)
    {
 
      // Check if current character already exists in
      // Dictionary/map
      if (map.ContainsKey(t[i]))
      {
 
        // If contains reduce count of that
        // character by 1 to indicate that current
        // character has been already counted .
          
          
          //ELSE CASEEEEEEEEEEEEEEEEEEEEEEEEEEEE
        // at the end, we will to check if the last count of
        // all characters in last is zero which
        // means all characters in String s are
        // present in String t
        map[t[i]]=map[t[i]] - 1;
      }
    }
         // Extract all keys of Dictionary/map
        
    var keys = map.Keys;
 
    // Loop over all keys and check if all keys are 0.
    // If so it means it is anagram.
    foreach (char key in keys) {
      if (map[key] != 0) {
        return false;
      }
    }
 
    // Returning True as all keys are zero
        
    return true;
        
    }
}
